using System.Collections.Generic;
using System.Linq;
using INMETRO.CIPP.DOMINIO.Interfaces;
using INMETRO.CIPP.DOMINIO.Interfaces.Repositorios;
using INMETRO.CIPP.SERVICOS.Interfaces;
using INMETRO.CIPP.SERVICOS.ModelService;
using INMETRO.CIPP.SHARED;

namespace INMETRO.CIPP.SERVICOS.Servicos
{
    public class InspecaoServico : IInspecaoServico
    {
        private readonly IInspecaoDominioService _inspecaoDominio;
        private readonly IOrganismoRepositorio _organismoRepositorio;


        public InspecaoServico(IInspecaoDominioService inspecaoDominio, IOrganismoRepositorio organismoRepositorio)
        {
            _inspecaoDominio = inspecaoDominio;
            _organismoRepositorio = organismoRepositorio;
        }

        public IEnumerable<InspecaoModelServico> ObterInspecoes(string codigoOia, string cipp)
        {

           var listaInspecao = new List<InspecaoModelServico>();

            if (!string.IsNullOrWhiteSpace(codigoOia))
            {
                var codigo = _organismoRepositorio.BuscarOrganismoPorId(codigoOia);
                if (codigo.Id <= 0)
                {
                    listaInspecao = new List<InspecaoModelServico>
                    {
                        new InspecaoModelServico
                        {
                            Mensagem = string.Format(MensagemSistema.NaoExisteCodigoOia, codigoOia),
                            ExisteExcecao = true
                        }
                    };

                    return listaInspecao;
                }
            }

            if (string.IsNullOrEmpty(cipp))
            {
                
                var lista = _inspecaoDominio.ObterInspecaoPorCodigoOia(codigoOia).ToList();

                if (lista.Count <= 0)
                {
                    listaInspecao = new List<InspecaoModelServico>
                    {
                        new InspecaoModelServico
                        {
                            Mensagem = string.Format(MensagemSistema.NenhumInspecaoEncontradoParaCodigoOia, codigoOia),
                            ExisteExcecao = true
                        }
                    };

                    return listaInspecao;
                }

                listaInspecao = Conversao.ConverterListaParaModeloService(lista);
                return listaInspecao;
            }
           
                var inspecao = _inspecaoDominio.ObterDadosInspecao(cipp);

                if (inspecao.Id <= 0)
                {
                    listaInspecao = new List<InspecaoModelServico>
                    {
                        new InspecaoModelServico
                        {
                            Mensagem = string.Format(MensagemSistema.NenhumInspecaoEncontradoParaCodigoCipp, cipp),
                            ExisteExcecao = true
                        }
                    };

                    return listaInspecao;
                }
                
                 listaInspecao.Add(Conversao.ConverterParaServico(inspecao));

                return listaInspecao;
           
        }

        public IEnumerable<InspecaoModelServico> ObterTodasInspecoes()
        {
            var listaInspecao = new List<InspecaoModelServico>();
            var lista = _inspecaoDominio.ObterTodasInspecoes().ToList();

            listaInspecao = Conversao.ConverterListaParaModeloService(lista);

            return listaInspecao;

        }

    }
}